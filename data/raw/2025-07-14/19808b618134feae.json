{
  "id": "19808b618134feae",
  "subject": "Introducing ReyaChain: Enabling \"Internet Capital Markets\"",
  "from": "The Edge Newsletter <hi@the-edge.xyz>",
  "date": "Mon, 14 Jul 2025 11:33:27 +0000 (UTC)",
  "body": "_This guest post is by __[Simon Jones](https://x.com/0xSimonJones)__, the founder of __[Reya Network](https://x.com/reya_xyz)_\r\n\r\n## **TLDR**\r\n\r\n* ReyaChain will be the **world’s first trading-specific based rollup** on Ethereum.\r\n\r\n\r\n* This novel design delivers a ‘holy grail’ for the industry - for the first time creating a trading environment that’s as fast as TradFi, but as decentralized as Ethereum.\r\n\r\n\r\n* Long term, this will enable ‘Internet Capital Markets’; a vision for the future where the [$1,000tn](https://www.lseg.com/content/dam/data-analytics/en_us/documents/charts/lseg-size-of-global-market-2024-in-charts.pdf) Capital Markets today move into the internet age, becoming globally accessible, transparent and composable via trustless blockchain-based financial rails.\r\n\r\n\r\n* Whilst [this previous post](https://x.com/0xSimonJones/status/1928391417409237105) outlined the products and distribution tactics to enable our Internet Capital Markets vision, this post specifically outlines the architecture and technical details of ReyaChain.\r\n\r\n\r\n* The based-rollup design of ReyaChain has a set of novel architectural decisions:\r\n\r\n  * **Node Specialization**: we create a number of different node types, to maximize performance of trading execution, whilst preserving decentralization by keeping barriers to entry low for participants to join the network. In particular we introduce ‘Execution Nodes’, highly performant nodes running ReyaNative and ReyaEVM. \r\n\r\n* **Based Sequencing via Delegation**: the Reya ‘Execution Nodes’ operate as Ethereum L1 Gateways. In doing so, Ethereum L1 validators delegate block production to these nodes, meaning the Reya Execution Nodes can give millisecond level pre-confirmations that trades have been executed and will be included in the L1 block. This design is comparable to builder-proposer-seperation, and is inspired by this article [from Gattaca](https://ethresear.ch/t/becoming-based-a-path-towards-decentralised-sequencing/21733). \r\n\r\n* **Dual Execution Environments**: ReyaChain will run two execution environments:\r\n\r\n    * ReyaNative: native rust code containing all the components required for trading. The orderbook will be fully onchain and verifiable via a ZK prover network. \r\n\r\n* ReyaEVM: a customized version of Arbitrum Orbit, allowing smart contract deployments by teams building on ReyaChain. This will talk to ReyaNative via read precompiles and a system write contract, unlocking new product opportunities for builders.\r\n\r\n* **Hybrid DA**: orders and executions have different data structure requirements and different DA requirements. As a result we treat them differently and push the highly DA intensive order data to specialized DA whilst the account data goes to Ethereum L1. \r\n\r\n\r\n* Rollout will be gradual. For those familiar with Reya today, we already have ReyaEVM running, meaning the next step is to launch the first components of the ReyaNative; specifically the orderbook. A full rollout plan is outlined at the end of this article.\r\n\r\n———————————————————————————\r\n\r\n### **The Opportunity **\r\n\r\nBitcoin proved the power of decentralizing the monetary base — a breakthrough worth trillions. But internet-native capital markets are an even bigger idea, with the potential to reshape a $1,000 trillion global system.\r\n\r\nSo far, crypto has fallen short. Every architecture has been forced into a compromise: performance at the cost of decentralization, or decentralization at the cost of performance. \r\n\r\nThat tradeoff has restricted our ability to deliver on what is arguably one of the most important innovations of our lifetime. Sure, to begin with, anyone building an onchain trading environment is building ‘just a DEX’. But if we can credibly solve the decentralization vs. performance challenge, we actually have a shot at transforming global capital markets.\r\n\r\n“The precedent is there. Email didn’t just speed up letters — it transformed how businesses operate. Online payments didn’t just reduce fees — it unlocked the digital economy. And Internet Capital Markets won’t just move existing capital markets onchain, they’ll reshape capital formation forever.“ — \r\n\r\nIt’s this vision that we want to deliver on with ReyaChain. Yes, our feet are firmly on the ground — the product is a DEX to begin with — but longterm it unlocks much more. This [previous post](https://x.com/0xSimonJones/status/1928391417409237105) explained our product and distribution strategy to unify finance onchain. This post outlines the technical details of ReyaChain and how we will enable our Internet Capital Market vision.\r\n\r\n### **Introducing ReyaChain**\r\n\r\nReyaChain is the world’s first trading-specific based rollup on Ethereum. This delivers TradFi level trading speed (i.e. millisecond-level execution) whilst being as decentralized as Ethereum.\r\n\r\nThe architecture allows for this through 4 main concepts, each of which we go into detail in below:\r\n\r\n* Node specialization\r\n\r\n* Based sequencing via delegation\r\n\r\n* Dual execution environments\r\n\r\n* Hybrid DA for orders and execution\r\n\r\nFirst, let’s understand the overall architecture. Then we’ll go into each core component in detail.\r\n\r\n#### **Node Specialization: introducing Network Participants**\r\n\r\nConventional blockchain architectures require every node in the network to re-execute all transactions and reach consensus, which introduces fundamental scalability and decentralization challenges. As transaction throughput and performance requirements increase, so too must the computational capacity of every node — ultimately raising the barrier to participation and reducing the number of feasible nodes that can support network operations. Even with higher hardware requirements, there’s an inherent latency that will exist throughout any chain that bundles consensus and execution given the requirement for execution to take place across multiple nodes.\r\n\r\nIn order to address the above-mentioned limitation, ReyaChain supports heterogeneous node types with tailored hardware requirements and decoupled execution and consensus. The diagram below illustrates the key network actors within ReyaChain's architecture.\r\n\r\nView image: (https://media.beehiiv.com/cdn-cgi/image/fit=scale-down,format=auto,onerror=redirect,quality=80/uploads/asset/file/ba4b6a77-172a-4944-8039-1bacb35c74eb/unnamed.png?t=1752436729)\r\nCaption: \r\n\r\n##### ‘Sticky’ Execution Node\r\n\r\nA ReyaChain Execution Node is a staked third-party entity responsible for issuing execution preconfirmations and sequencing based rollup transactions. It monitors and stores incoming transactions in a first-in-first-out (FIFO) queue. Block-building operations are executed inside a Trusted Execution Environment (TEE). This allows clients to verify compliance with FIFO ordering policy thus mitigating discretionary block ordering rules.\r\n\r\nAn Execution Node communicates via a fast, leader-aware peer-to-peer (p2p) gossip network, inspired by Solana Turbine block propagation. Clients can send transactions to the currently active Execution Node or to any full node which would then forward it via the p2p network.\r\n\r\nIt is worth noting that the leader Execution Node signs block fragments (frags) made up of a single transaction. This allows nodes to begin rebuilding the current rollup block immediately instead of waiting for the full block to be produced. This gives traders millisecond-level trade confirmation. Since the Execution Node fully executes the transaction before providing the pre-conf, it means the price of the trade is known and issues that could revert a trade (such as the trader not having enough margin) have been satisfied.\r\n\r\nThe Execution Nodes are described as ‘Sticky’ because they don’t rotate every block like validators on Ethereum L1. Instead, they are designed to maintain a leader over a prolonged period (e.g. 1 hour). Rotation to a new leader is known in advance, giving market makers and other latency sensitive actors the opportunity to migrate operations in advance and remain geographically close to the new node.\r\n\r\n##### Full Node\r\n\r\nReyaChain Full Nodes are non-sequencing follower nodes that track the tip of the chain via the p2p gossip network. As Full Nodes receive rollup block fragments, they optimistically build a local temporary block and provide execution pre-confirmations to end users.\r\n\r\nFull Nodes have to locally re-execute each rollup transaction in order to keep up with the current state of the chain, meaning they’ll need to have hardware requirements that are comparable to the requirements imposed on Execution Nodes. They are essential for power users such as bridge operators and market makers to achieve fast finality.\r\n\r\n##### Light Node\r\n\r\nLight Nodes keep up with the chain progress without actually needing to re-execute individual transactions. They need to simply apply state-diffs provided by the Execution Node and verify execution proofs generated by the prover network to ensure state transitions are valid. This means that they can run on commodity hardware and power services such as indexers, block explorers or archival nodes.\r\n\r\n##### Prover Node\r\n\r\nReya Chain Prover Nodes validate blocks produced by the Execution Node asynchronously and out of order meaning all state transitions can be cryptographically proven to have been executed correctly. With the entire orderbook embedded into the Execution Node, both matching and clearing are verifiable. This contrasts with most existing approaches that implement matching offchain and only propagating executions onchain.\r\n\r\nIn order to facilitate this, Reya’s application logic is written in pure rust and cross compiled into ZK-circuits. These execution proofs can in turn be trustlessly verified by a trustless smart contract bridge on Ethereum L1 as well as the ReyaChain Light Nodes.\r\n\r\n#### **Based sequencing design using delegation**\r\n\r\nAt the core of a rollup is a sequencer (we call it an Execution Node) — a vital component responsible for managing the transaction flow. Traditional rollup architectures employ a single centralized sequencer so they can achieve web2-like performance and latency while being relatively straightforward to bring into production given there’s no need to bootstrap consensus.\r\n\r\nThis simplicity does have a range of accompanying drawbacks. Namely, liveness and censorship resistance. A centralized sequencer is a single point of failure, meaning if something goes wrong (e.g. technical failure) then the entire chain will be fully down until the sequencer is back up again.\r\n\r\nAdditionally, a centralized sequencer has the ultimate power to decide which transactions it wants to include and in which order. This could be due for purely economic motivations, which would endanger fundamental principles of a decentralized, antifragile and permissionless network.\r\n\r\nOn the other hand, based sequencing allows a subset of Ethereum L1 proposers to take on the responsibility to sequence rollup transactions. Sophisticated Ethereum L1 proposers may choose to operate their own ReyaChain Execution Nodes while others can choose to delegate sequencing rights to third-party operators. This concept takes inspiration from the proposer-builder-separation framework popularized by mev-boost as illustrated in the diagram below.\r\n\r\nView image: (https://media.beehiiv.com/cdn-cgi/image/fit=scale-down,format=auto,onerror=redirect,quality=80/uploads/asset/file/bdf5ef8d-4880-4391-8e3f-835510f9d9f0/unnamed.png?t=1752436729)\r\nCaption: \r\n\r\nSome of the key advantages of a based rollup over a traditional one are:\r\n\r\n1. Stronger liveness guarantees\r\n\r\n2. Stronger censorship resistance\r\n\r\n3. Potential for synchronous interactions with the L1 (e.g. take a flash-loan on Ethereum, execute a trade on Reya and then pay the loan back on Ethereum)\r\n\r\nThe ‘lookahead’, which is a mapping from Ethereum L1 slots to Execution Node identities, serves as a leader schedule. Execution Nodes have exclusive rights to advance the ReyaChain state forward inside of a range of slots assigned to them by L1 proposers. In order to prevent frequent rotations of nodes, which would cause additional latency, a lower limit will be imposed on the number of consecutive slots a single Execution Node is allowed to sequence. In order to enforce the lookahead schedule, ReyaChain relies on an inbox contract that only accepts transaction batches from an Execution Node assigned to that slot.\r\n\r\nEach transaction on ReyaChain has 3 confirmation levels:\r\n\r\n1. Pre-confirmed: sequenced by the Execution Node and an execution receipt is available to the user\r\n\r\n2. Included: the transaction is included in an L2 block\r\n\r\n3. Finalised: the L2 block that contains the transaction has been batched and included in an L1 block\r\n\r\nEthereum L1 proposers and Execution Nodes can permissionlessly join ReyaChain and take on the responsibility of sequencing its blocks. In order to do that they must post collateral, $REYA, in an Ethereum L1 registry smart contract. L1 Proposers and Execution Nodes risk having their collateral slashed in case they start misbehaving.\r\n\r\n“Execution Nodes are responsible for signing each pre-confirmation. If there are discrepancies between the signed pre-confirmations (including their sequence) and data published in an Ethereum L1 inbox contract, Full Node operators have the power to highlight them and claim a portion of slashed $REYA as a reward for their services. This ensures the pre-confirmations have economic guarantees for traders.“ — \r\n\r\n#### **Performant and programmable: dual execution environments**\r\n\r\nA ReyaChain Execution Node executes transactions as native rust code (without leveraging a general purpose virtual machine). This frees it from the interpreter overhead, state access latency, strict CU budgets and stack limits associated with the vanilla EVM. By doing so, ReyaChain achieves TradFi-like performance without compromising decentralization. ReyaChain also has native support for a range of oracle provider networks to pull in pricing data in order to support active perpetual futures markets.\r\n\r\nIt’s worth noting that this comes at the cost of composability with existing EVM smart contracts. Hence, in order to continue supporting the vast developer ecosystem built around the EVM, the Execution Node supports the EVM as an additional execution environment via the Arbitrum Orbit stack.\r\n\r\nThe ReyaEVM environment is able to communicate with ReyaNative rust primitives via read precompiles and a system contract for sending transactions. Read precompiles have methods for requesting information such as perp positions and oracle prices. In order to execute an action (e.g. limit order) in the native rust environment, the write system contract would emit an event that would in turn be picked up and executed asynchronously.\r\n\r\nInteroperability between the ReyaEVM and ReyaNative environments is expected to give rise to a diverse set of novel financial primitives and structured products that were not possible before. This will be achieved by combining the performance of native rust components with the programmability and composability of the EVM as illustrated in the below diagram.\r\n\r\nView image: (https://media.beehiiv.com/cdn-cgi/image/fit=scale-down,format=auto,onerror=redirect,quality=80/uploads/asset/file/31178fe2-4bb0-4228-a14c-228d26354f80/unnamed.png?t=1752436728)\r\nCaption: \r\n\r\n#### **Data availability: orders vs. executions**\r\n\r\nData availability (DA) provides guarantees that the complete set of data required to reconstruct the rollup state is accessible. This is a critical component of rollup security, as it enables full nodes and light nodes (+ prover nodes) to independently reconstruct state transitions.\r\n\r\nEthereum’s Dencun upgrade ([EIP-4844](https://eips.ethereum.org/EIPS/eip-4844)) introduced blobs as a cheaper, transient data availability (DA) layer alongside calldata. Blobs reduce costs for rollups by expiring data after ~18 days, but their current throughput - around 64 KB/s (6 blobs × 128 KB per block) is insufficient for high-throughput systems like ReyaChain.\r\n\r\nThis constraint is especially relevant when considering order-level data. Reconstructing the full order book — including all updates, cancels and inserts, requires high-throughput DA and more specialized data structures than Ethereum currently supports. To meet these needs, ReyaChain leverages an external DA provider specifically for order-level data.\r\n\r\nHowever, Ethereum blobs are well-suited for publishing data needed to reconstruct the account state including changes to account balances and positions as a result of executions (when two orders are matched on the orderbook). In essence, Ethereum will handle execution-level DA, while order-level DA must be offloaded to a more scalable external provider.\r\n\r\n#### **Progressive rollout**\r\n\r\nView image: (https://media.beehiiv.com/cdn-cgi/image/fit=scale-down,format=auto,onerror=redirect,quality=80/uploads/asset/file/0b4b4da9-f470-4b00-a312-0a8751c3e2fe/unnamed.png?t=1752436729)\r\nCaption: \r\n\r\nThe ultimate goal of ReyaChain is to achieve a fully permissionless based sequencing setup while delivering the critical accompanying primitives outlined through this writeup. Before getting into the details of the rollout strategy, it’s worth taking a step back to have a snapshot of the current state of ReyaChain.\r\n\r\nToday, Reya is a general purpose Arbitrum Orbit rollup, which leverages the EVM as its sole execution environment. [ReyaDEX](http://app.reya.xyz) is made up of a set of solidity smart contracts that power matching (via a passive pool) and clearing of perpetual future contracts.\r\n\r\n\r\nThe full rollout of ReyaChain will take place in three phases:\r\n\r\n1. Migrate trading logic to ReyaNative: this will involve moving trading logic from smart contract running in an EVM environment into native rust components. The first step will be the introduction of a highly performant orderbook\r\n\r\n2. Deploy Execution Node: deploy a single Execution Node. This will initially function as a centralized sequencer alongside a hybrid DA setup (Ethereum blobs + specialized DA). This is also when $REYA staking goes live. \r\n\r\n3. Transition to Based: Once the critical steps above are complete, we will progressively transition ReyaChain to the outlined based-sequencing design. We take inspiration from [this Gattaca post](https://ethresear.ch/t/becoming-based-a-path-towards-decentralised-sequencing/21733) on how it will be phased, but look forward to working with the broader Ethereum community as we look to deliver the first ever application-specific based rollup. \r\n\r\n### **To wrap**\r\n\r\nYes, no one cares about infrastructure. All people want is a trading environment that’s millisecond-level fast, accessible and always works. But that’s also the point - ReyaChain unlocks the ability to have millisecond-level trading execution, be globally accessible and have the liveness and censorship resistance guarantees of Ethereum.\r\n\r\nIn the short term Reya is ‘just a DEX’. But our goal is much bigger: a trustless global financial layer that anyone can tap into, build on, and trade within. This needs novel technology, which ReyaChain provides. It also needs a [smart execution plan](https://x.com/0xSimonJones/status/1928391417409237105), to actually move global finance onchain. In doing so, we want to transform the [$1,000 trillion](https://www.lseg.com/content/dam/data-analytics/en_us/documents/charts/lseg-size-of-global-market-2024-in-charts.pdf) global capital markets and bring them into the internet age.\r\n\r\n\r\nInternet Capital Markets are happening. And they’re happening on Reya.\r\n\r\n* _Follow __[Simon Jones](https://x.com/0xSimonJones)__ and __[Reya Network](https://x.com/reya_xyz)__ for all their updates!_\r\n\r\n\r\n———\r\n\r\nYou are reading a plain text version of this post. For the best experience, copy and paste this link in your browser to view the post online:\r\nhttps://www.the-edge.xyz/p/introducing-reyachain-enabling-internet-capital-markets\r\n"
}